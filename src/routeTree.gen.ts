/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SetupAccountRouteImport } from './routes/setup-account'
import { Route as LogoutRouteImport } from './routes/logout'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedInvoicesRouteImport } from './routes/_authenticated/invoices'
import { Route as AuthenticatedDashboardRouteImport } from './routes/_authenticated/dashboard'
import { Route as AuthenticatedAccountRouteImport } from './routes/_authenticated/account'
import { Route as AuthenticatedServicesIndexRouteImport } from './routes/_authenticated/services/index'
import { Route as AuthenticatedClientsIndexRouteImport } from './routes/_authenticated/clients/index'
import { Route as ApiAuthCallbackRouteImport } from './routes/api/auth/callback'

const SetupAccountRoute = SetupAccountRouteImport.update({
  id: '/setup-account',
  path: '/setup-account',
  getParentRoute: () => rootRouteImport,
} as any)
const LogoutRoute = LogoutRouteImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedInvoicesRoute = AuthenticatedInvoicesRouteImport.update({
  id: '/invoices',
  path: '/invoices',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedDashboardRoute = AuthenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedAccountRoute = AuthenticatedAccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedServicesIndexRoute =
  AuthenticatedServicesIndexRouteImport.update({
    id: '/services/',
    path: '/services/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const AuthenticatedClientsIndexRoute =
  AuthenticatedClientsIndexRouteImport.update({
    id: '/clients/',
    path: '/clients/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)
const ApiAuthCallbackRoute = ApiAuthCallbackRouteImport.update({
  id: '/api/auth/callback',
  path: '/api/auth/callback',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/logout': typeof LogoutRoute
  '/setup-account': typeof SetupAccountRoute
  '/account': typeof AuthenticatedAccountRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/invoices': typeof AuthenticatedInvoicesRoute
  '/api/auth/callback': typeof ApiAuthCallbackRoute
  '/clients': typeof AuthenticatedClientsIndexRoute
  '/services': typeof AuthenticatedServicesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/logout': typeof LogoutRoute
  '/setup-account': typeof SetupAccountRoute
  '/account': typeof AuthenticatedAccountRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/invoices': typeof AuthenticatedInvoicesRoute
  '/api/auth/callback': typeof ApiAuthCallbackRoute
  '/clients': typeof AuthenticatedClientsIndexRoute
  '/services': typeof AuthenticatedServicesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/logout': typeof LogoutRoute
  '/setup-account': typeof SetupAccountRoute
  '/_authenticated/account': typeof AuthenticatedAccountRoute
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_authenticated/invoices': typeof AuthenticatedInvoicesRoute
  '/api/auth/callback': typeof ApiAuthCallbackRoute
  '/_authenticated/clients/': typeof AuthenticatedClientsIndexRoute
  '/_authenticated/services/': typeof AuthenticatedServicesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/logout'
    | '/setup-account'
    | '/account'
    | '/dashboard'
    | '/invoices'
    | '/api/auth/callback'
    | '/clients'
    | '/services'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/logout'
    | '/setup-account'
    | '/account'
    | '/dashboard'
    | '/invoices'
    | '/api/auth/callback'
    | '/clients'
    | '/services'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/logout'
    | '/setup-account'
    | '/_authenticated/account'
    | '/_authenticated/dashboard'
    | '/_authenticated/invoices'
    | '/api/auth/callback'
    | '/_authenticated/clients/'
    | '/_authenticated/services/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  LogoutRoute: typeof LogoutRoute
  SetupAccountRoute: typeof SetupAccountRoute
  ApiAuthCallbackRoute: typeof ApiAuthCallbackRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/setup-account': {
      id: '/setup-account'
      path: '/setup-account'
      fullPath: '/setup-account'
      preLoaderRoute: typeof SetupAccountRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/invoices': {
      id: '/_authenticated/invoices'
      path: '/invoices'
      fullPath: '/invoices'
      preLoaderRoute: typeof AuthenticatedInvoicesRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/account': {
      id: '/_authenticated/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AuthenticatedAccountRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/services/': {
      id: '/_authenticated/services/'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof AuthenticatedServicesIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/clients/': {
      id: '/_authenticated/clients/'
      path: '/clients'
      fullPath: '/clients'
      preLoaderRoute: typeof AuthenticatedClientsIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/api/auth/callback': {
      id: '/api/auth/callback'
      path: '/api/auth/callback'
      fullPath: '/api/auth/callback'
      preLoaderRoute: typeof ApiAuthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface AuthenticatedRouteRouteChildren {
  AuthenticatedAccountRoute: typeof AuthenticatedAccountRoute
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedInvoicesRoute: typeof AuthenticatedInvoicesRoute
  AuthenticatedClientsIndexRoute: typeof AuthenticatedClientsIndexRoute
  AuthenticatedServicesIndexRoute: typeof AuthenticatedServicesIndexRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedAccountRoute: AuthenticatedAccountRoute,
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedInvoicesRoute: AuthenticatedInvoicesRoute,
  AuthenticatedClientsIndexRoute: AuthenticatedClientsIndexRoute,
  AuthenticatedServicesIndexRoute: AuthenticatedServicesIndexRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  LogoutRoute: LogoutRoute,
  SetupAccountRoute: SetupAccountRoute,
  ApiAuthCallbackRoute: ApiAuthCallbackRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
